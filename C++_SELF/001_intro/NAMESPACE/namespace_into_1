


A namespace is a declarative region that provides a scope to the identifiers (the names of types, functions, variables, etc) inside it. Namespaces are used to organise code into logical groups and to prevent name collisions that can occur especially when your code base includes multiple libraries.


In each scope, a name(identifier) can only represent one entity. 
So, there cannot be two variables with the same name in the same scope. {int i; float i; double i;}
Using namespaces, we can create two variables or member functions having the same name.

// Here we can see that more than one variables 
// are being used without reporting any error. 
// That is because they are declared in the 
// different namespaces and scopes. 

#include <iostream> 
using namespace std; 
namespace first 
{
	int val = 500;  
} 
int val = 100; 
int main() 
{ 
	int val = 200; 
	// These variables can be accessed from 
	// outside the namespace using the scope 
	// operator :: 
	cout << first::val << '\n'; 
	return 0; 
} 



Namespaces allow us to group named entities that otherwise would have global scope into narrower scopes, giving them namespace scope. This allows organizing the elements of programs into different logical scopes referred to by names.

A namespace is a declarative region that provides a scope to the identifiers (names of the types, function, variables etc) inside it. Multiple namespace blocks with the same name are allowed. All declarations within those blocks are declared in the named scope.

A namespace definition begins with the keyword namespace followed by the namespace name as follows:
namespace namespace_name 
{
   int x, y; // code declarations where 
             // x and y are declared in 
             // namespace_name's scope
}

Namespace declarations appear only at global scope.
Namespace declarations can be nested within another namespace.
Namespace declarations donâ€™t have access specifiers. (Public or private)
No need to give semicolon after the closing brace of definition of namespace.
We can split the definition of namespace over several units


Classes and Namespace:
// A C++ program to demonstrate use of class 
// in a namespace 
#include <iostream> 
using namespace std; 
namespace ns 
{ 
    class geek 
    { 
    public: 
        void display() 
        { 
            cout << "ns::geek::display()\n"; 
        } 
    }; 
} 
  
int main() 
{ 
    ns::geek obj; 
    obj.display(); 
    return 0; 
} 
Output:
ns::geek::display()


Class can also be declared inside namespace and defined outside namespace using following syntax
// A C++ program to demonstrate use of class 
// in a namespace 
#include <iostream> 
using namespace std; 
namespace ns 
{ 
    // Only declaring class here 
    class geek; 
} 
// Defining class outside 
class ns::geek 
{ 
public: 
    void display() 
    { 
        cout << "ns::geek::display()\n"; 
    } 
}; 
int main() 
{ 
    ns::geek obj; 
    obj.display(); 
    return 0; 
} 
Output:
ns::geek::display()



We can define methods also outside the namespace. Following is an example code.
// A C++ code to demonstrate that we can define  
// methods outside namespace. 
#include <iostream> 
using namespace std; 
namespace ns 
{ 
    void display(); 
    class geek 
    { 
    public: 
       void display(); 
    }; 
} 
void ns::geek::display() 
{ 
    cout << "ns::geek::display()\n"; 
} 
void ns::display() 
{ 
    cout << "ns::display()\n"; 
} 
int main() 
{ 
    ns::geek obj; 
    ns::display(); 
    obj.display(); 
    return 0; 
} 
Output:
ns::display()
ns::geek::display()




