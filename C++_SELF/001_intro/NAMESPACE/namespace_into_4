


//  classes inside namespaces 
#include <iostream> 
#include <string> 
namespace GeeksforGeeks { 
std::string out = "This is not from (GeeksforGeeks::string) class!"; 
class string { 
private: 
	std::string s = "Hello! "; 
public: 
	string(const std::string& str) 
	{ 
		s += str; 
	} 
	std::string get_str() 
	{ 
		return s; 
	} 
}; 
}; 
int main() 
{ 
	std::cout << GeeksforGeeks::out<< std::endl; 
	// Create an object of string class 
	GeeksforGeeks::string str("From namespace Test!"); 
	// Print the string 
	std::cout << str.get_str()<< std::endl; 
	return 0; 
} 

Output:
This is not from (GeeksforGeeks::string) class!
Hello! From namespace Test!




 We have created three namespaces – test_space1, test_space2 and test_space3.
All of these namespaces have a common class string in them. We have created their respective objects s2, s3 and s4 which take different parameters during initialization.
The namespace test_space3 is used to access class members from inside the string class of namespace test_space2 and hence, test_space3::string’s constructor is different from the other two classes constructors.
So, We are able to access the data from test_space2 and use it in test_space3. This shows the Accessibility and Exchange of Data between different Namespaces and their Classes.


// C++ program to show overloading and 
// accessing from different namespaces 
#include <iostream> 
#include <string> 
namespace test_space1 { 
const std::string const_prefix = "(test_space1::string) "; 
class string { 
private: 
	std::string str = ""; 
	// Private default constructor 
	string(); 
public: 
	// Public parameterized constructor 
	string(const std::string& s): str(const_prefix + s) 
	{ 
	} 

	// Get string function 
	std::string get_str() const
	{ 
		return str; 
	} 
}; 
}; 
namespace test_space2 { 
const std::string const_prefix = "(test_space2::string) "; 
class string { 
private: 
	std::string str = ""; 
	const std::string check_scope = "test_space2!"; 
	string(); 
public: 
	string(const std::string& s):str(const_prefix + s) 
	{ } 
	std::string get_str() const
	{ 
		return str; 
	} 
	std::string getScopestr() const
	{ 
		return check_scope; 
	} 
}; 
}; 
namespace test_space3 { 
// Object from another namespace (test_space2 in this case!) 
const std::string const_prefix = "(test_space3::string) from both nmspaces test_space3 & "; 
class string { 
	std::string str = ""; 
	string(); 
public: 
	string(const test_space2::string& s):str(const_prefix + s.getScopestr()) 
	{ } 

	// Access function from test_space2 
	// and adding a private string of 
	// test_space2:: string to str of 
	// test_space3 
	std::string get_str() const
	{ 
		return str; 
	} 
}; 
}; 
std::ostream& operator<<(std::ostream& os, const test_space1::string& s1) 
{ 
	os << s1.get_str(); 
	return os; 
} 
std::ostream& operator<<(std::ostream& os, const test_space2::string& s2) 
{ 
	os << s2.get_str(); 
	return os; 
} 
std::ostream& operator<<(std::ostream& os, const test_space3::string& s3) 
{ 
	os << s3.get_str(); 
	return os; 
} 
int main() 
{ 
	const std::string str("This is a standard string"); 
	std::cout << str << std::endl; 

	const std::string sample1("This is a test_space1 namespace string"); 
	const test_space1::string s2(sample1); 
	std::cout << s2 << std::endl; 

	const std::string sample2("This is a test_space2 namespace string"); 
	test_space2::string s3(sample2); 
	std::cout << s3 << std::endl; 

	test_space3::string s4(s3); 
	std::cout << s4 << std::endl; 
	return 0; 
} 
Output:
This is a standard string
(test_space1::string) This is a test_space1 namespace string
(test_space2::string) This is a test_space2 namespace string
(test_space3::string) Accessing from both namespaces test_space3 and test_space2!




