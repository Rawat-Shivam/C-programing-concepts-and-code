


std:: valarray class in C++
C++98 introduced a special container called valarray to hold and provide mathematical operations on arrays efficiently.

It supports element-wise mathematical operations and various forms of generalized subscript operators, slicing and indirect access.
As compare to vectors, valarrays are efficient in certain mathematical operations than vectors also.
Public member functions in valarray class :

1. apply() :- This function applies the manipulation given in its arguments to all the valarray elements at once and returns a new valarray with manipulated values.
2. sum() :- This function returns the summation of all the elements of valarrays at once.
3. min() :- This function returns the smallest element of valarray
4. max() :- This function returns the largest element of valarray

5. shift() :- This function returns the new valarray after shifting elements by the number mentioned in its argument. If the number is positive, left-shift is applied, if number is negative, right-shift is applied.

6. cshift() :- This function returns the new valarray after circularly shifting(rotating) elements by the number mentioned in its argument. If the number is positive, left-circular shift is applied, if number is negative, right-circular shift is applied.
7. swap() :- This function swaps one valarray with other.

// Initializing valarray 
    valarray<int> varr = { 10, 2, 20, 1, 30 }; 
      
    // Declaring new valarray 
    valarray<int> varr1 ; 
      
    // Using apply() to increment all elements by 5 
    varr1 = varr.apply([](int x){return x=x+5;}); 
      
    // Displaying new elements value 
    cout << "The new valarray with manipulated values is : "; 
    for (int &x: varr1) cout << x << " "; 
    cout << endl; 
  cout << varr.sum() << endl; 
    cout << varr.min() << endl; 
    cout << varr.max() << endl; 
// using shift() to shift elements to left 
    // shifts valarray by 2 position 
    varr1 = varr.shift(2); 
  
    // using cshift() to circulary shift elements to right 
    // rotates valarray by 3 position 
    varr1 = varr.cshift(-3); 
   // Displaying elements of valarray after circular shifting 
    cout << "The new valarray after circular shifting is : "; 
    for ( int&x : varr1) cout << x << " "; 
    cout << endl; 
// Use of swap() to swap the valarrays 
     varr1.swap(varr2);//both are swapped ..var1 elements in var2..and var2 elements in var1 



















