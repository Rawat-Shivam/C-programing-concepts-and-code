

Array algorithms in C++ STL (all_of, any_of, none_of, copy_n and iota)

all_of()

This function operates on whole range of array elements and can save time to run a loop to check each elements one by one. It checks for a given property on every element and returns true when each element in range satisfies specified property, else returns false.

// C++ code to demonstrate working of all_of() 
#include<iostream> 
#include<algorithm> // for all_of() 
using namespace std; 
int main() 
{ 
    // Initializing array 
    int ar[6] =  {1, 2, 3, 4, 5, -6}; 
  
    // Checking if all elements are positive 
    all_of(ar, ar+6, [](int x) { return x>0; })? 
          cout << "All are positive elements" : 
          cout << "All are not positive elements"; 
  
    return 0; 
  
} 
Output:
All are not positive elements


any_of()

This function checks for a given range if thereâ€™s even one element satisfying a given property mentioned in function. Returns true if at least one element satisfies the property else returns false.

int ar[6] =  {1, 2, 3, 4, 5, -6}; 
  
    // Checking if any element is negative 
    any_of(ar, ar+6, [](int x){ return x<0; })? 
          cout << "There exists a negative element" : 
          cout << "All are positive elements"; 
Output:
There exists a negative element


none_of()

This function returns true if none of elements satisfies the given condition else returns false.

 // Initializing array 
    int ar[6] =  {1, 2, 3, 4, 5, 6}; 
  
    // Checking if no element is negative 
    none_of(ar, ar+6, [](int x){ return x<0; })? 
          cout << "No negative elements" : 
          cout << "There are negative elements"; 
Output:
No negative elements


copy_n()

copy_n() copies one array elements to new array. This type of copy creates a deep copy of array. This function takes 3 arguments, source array name, size of array and the target array name.

// C++ code to demonstrate working of copy_n() 
#include<iostream> 
#include<algorithm> // for copy_n() 
using namespace std; 
int main() 
{ 
    // Initializing array 
    int ar[6] =  {1, 2, 3, 4, 5, 6}; 
  
    // Declaring second array 
    int ar1[6]; 
  
    // Using copy_n() to copy contents 
    copy_n(ar, 6, ar1); 
  
    // Displaying the copied array 
    cout << "The new array after copying is : "; 
    for (int i=0; i<6 ; i++) 
       cout << ar1[i] << " "; 
  
    return 0; 
  
}


iota()

This function is used to assign continuous values to array. This function accepts 3 arguments, the array name, size, and the starting number.

// C++ code to demonstrate working of iota() 
#include<iostream> 
#include<numeric> // for iota() 
using namespace std; 
int main() 
{ 
    // Initializing array with 0 values 
    int ar[6] =  {0}; 
  
    // Using iota() to assign values 
    iota(ar, ar+6, 20); 
  
    // Displaying the new array 
    cout << "The new array after assigning values is : "; 
    for (int i=0; i<6 ; i++) 
       cout << ar[i] << " "; 
  
    return 0; 
  
} 
Output:

The new array after assigning values is : 20 21 22 23 24 25
In the above code, continuous values are assigned to array using iota().





















