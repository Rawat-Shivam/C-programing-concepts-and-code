


Forward List in C++ 
Forward list in STL implements singly linked list. Introduced from C++11, forward list are useful than other containers in insertion, removal and moving operations (like sort) and allows time constant insertion and removal of elements.

It differs from list by the fact that forward list keeps track of location of only next element while list keeps track to both next and previous elements, thus increasing the storage space required to store each element. The drawback of forward list is that it cannot be iterated backwards and its individual elements cannot be accessed directly.

Forward List is preferred over list when only forward traversal is required (same as singly linked list is preferred over doubly linked list) as we can save space. Some example cases are, chaining in hashing, adjacency list representation of graph, etc.


// C++ code to demonstrate forward list 
// and assign() 
#include<iostream> 
#include<forward_list>  
using namespace std; 
  
int main() 
{ 
    // Declaring forward list 
    forward_list<int> flist1; 
  
    // Declaring another forward list 
    forward_list<int> flist2; 
  
    // Assigning values using assign() 
    flist1.assign({1, 2, 3}); 
  
    // Assigning repeating values using assign() 
    // 5 elements with value 10 
    flist2.assign(5, 10); 
  
    // Displaying forward lists 
    cout << "The elements of first forward list are : "; 
    for (int&a : flist1) 
        cout << a << " "; 
    cout << endl; 
      
    cout << "The elements of second forward list are : "; 
    for (int&b : flist2) 
        cout << b << " "; 
    cout << endl; 
  
// Inserting value using push_front() 
    // Inserts 60 at front 
    flist.push_front(60); 
/ Inserting value using emplace_front() 
    // Inserts 70 at front 
    flist.emplace_front(70); 
 // Deleting first value using pop_front() 
    // Pops 70 
    flist.pop_front(); 


/ Declaring a forward list iterator 
    forward_list<int>::iterator ptr; 

    // Inserting value using insert_after() 
    // starts insertion from second position 
    ptr =  flist.insert_after(flist.begin(), {1, 2, 3}); 

 // Inserting value using emplace_after() 
    // inserts 2 after ptr 
    ptr = flist.emplace_after(ptr,2);

// Deleting value using erase.after Deleted 2 
    // after ptr 
    ptr = flist.erase_after(ptr); 

// Removing element using remove() 
    // Removes all occurrences of 40 
    flist.remove(40); 

// Removing according to condition. Removes  
    // elements greater than 20. Removes 25 and 30 
    flist.remove_if([](int x){ return x>20;}); 

/ Shifting elements from first to second 
    // forward list after 1st position 
    flist2.splice_after(flist2.begin(),flist1);// first add in secocnd at position after first


    return 0; 
} 
Output:



:more functions:
https://www.geeksforgeeks.org/forward-list-c-set-1-introduction-important-functions/

























