
Array class in C++
The introduction of array class from C++11 has offered a better alternative for C-style arrays. The advantages of array class over C-style array are :-

Array classes knows its own size, whereas C-style arrays lack this property. So when passing to functions, we don’t need to pass size of Array as a separate parameter.
With C-style array there is more risk of array being decayed into a pointer. Array classes don’t decay into pointers
Array classes are generally more efficient, light-weight and reliable than C-style arrays.


// C++ code to demonstrate working of array, 
// to() and get() 
#include<iostream> 
#include<array> // for array, at() 
#include<tuple> // for get() 
using namespace std; 
int main() 
{ 
    // Initializing the array elements 
    array<int,6> ar = {1, 2, 3, 4, 5, 6}; 
  
    // Printing array elements using at() 
    cout << "The array elements are (using at()) : "; 
    for ( int i=0; i<6; i++) 
    cout << ar.at(i) << " "; 
    cout << endl; 
 // Printing array elements using get() 
    cout << "The array elements are (using get()) : "; 
    cout << get<0>(ar) << " " << get<1>(ar) << " "; 
// Printing array elements using operator[] 
    cout << "The array elements are (using operator[]) : "; 
    for ( int i=0; i<6; i++) 
    cout << ar[i] << " "; 
    cout << endl; 
// Printing first element of array 
    cout << "First element of array is : "; 
    cout << ar.front() << endl; 
  
    // Printing last element of array 
    cout << "Last element of array is : "; 
    cout << ar.back() << endl; 

// Printing number of array elements 
    cout << "The number of array elements is : "; 
    cout << ar.size() << endl; 
  
    // Printing maximum elements array can hold 
    cout << "Maximum elements array can hold is : "; 
    cout << ar.max_size() << endl; 

// Initializing 2nd array 
    array<int,6> ar1 = {7, 8, 9, 10, 11, 12};

// Swapping ar1 values with ar 
    ar.swap(ar1); 

 // Checking size of array if it is empty 
    ar1.empty()? cout << "Array empty": 
        cout << "Array not empty"; 
    cout << endl; 
  
    // Filling array with 0 ...all elements=0;
    ar.fill(0); 



return 0; 
  
} 















