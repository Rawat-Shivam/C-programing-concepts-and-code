
					/********** preprocessors ******/


There are 4 main types of preprocessor directives:
Macros
File Inclusion
Conditional Compilation
Other directives




Preprocessors are programs that process our source code before compilation.
The source code written by programmers is stored in the file program.c. This file is then processed by preprocessors and an expanded source code file is generated named program. This expanded file is compiled by the compiler and an object code file is generated named program .obj. Finally, the linker links this object code file to the object code of the library functions to generate the executable file program.exe.
This (‘#’) symbol at the beginning of a statement in a C/C++ program indicates that it is a pre-processor directive. We can place these preprocessor directives anywhere in our program






Macros: Macros are a piece of code in a program which is given some name. Whenever this name is encountered by the compiler the compiler replaces the name with the actual piece of code. The ‘#define’ directive is used to define a macro. 
There is no semi-colon(‘;’) at the end of macro definition. Macro definitions do not need a semi-colon to end.

Macros defined with arguments works similarly as functions.

#define AREA(l, b) (l * b) 
area = AREA(l1, l2); 

whenever the compiler finds AREA(l, b) in the program it replaces it with the statement (l*b) . Not only this, the values passed to the macro template AREA(l, b) will also be replaced in the statement (l*b). Therefore AREA(10, 5) will be equal to 10*5.









File Inclusion:
 This type of preprocessor directive tells the compiler to include a file in the source code program. 
There are two types of files which can be included by the user in the program.

Header File or Standard files: 

These files contains definition of pre-defined functions like printf(), scanf() etc. These files must be included for working with these functions. 
#include< file_name >
where file_name is the name of file to be included. The ‘<‘ and ‘>’ brackets tells the compiler to look for the file in standard directory.

user defined files:

When a program becomes very large, it is good practice to divide it into smaller files and include whenever needed. These types of files are user defined files. These files can be included as:
#include"filename"






Conditional Compilation: 
Conditional Compilation directives are type of directives which helps to compile a specific portion of the program or to skip compilation of some specific part of the program based on some conditions. This can be done with the help of two preprocessing commands ‘ifdef‘ and ‘endif‘.





Other directives: 
Apart from the above directives there are two more directives which are not commonly used. These are:

#undef Directive: 
The #undef directive is used to undefine an existing macro

#pragma Directive: 
This directive is a special purpose directive and is used to turn on or off some features. This type of directives are compiler-specific i.e., they vary from compiler to compiler. Some of the #pragma directives are discussed below:

#pragma startup and #pragma exit:
 These directives helps us to specify the functions that are needed to run before program startup( before the control passes to main()) and just before program exit (just before the control returns from main()).
/******************************************************************************************
#include <stdio.h> 
void func1(); 
void func2(); 
#pragma startup func1 
#pragma exit func2 
void func1() 
{ 
	printf("Inside func1()\n"); 
} 
void func2() 
{ 
	printf("Inside func2()\n"); 
} 
int main() 
{ 
	printf("Inside main()\n"); 
  	
	void func1(); // need to put them inside the main()
	void func2();
	return 0; 
} 
*********************************************************************************/
Output:
Inside func1()
Inside main()
Inside func2()

The above code will produce the output as given below when run on GCC compilers:
Inside main()
This happens because GCC does not supports #pragma startup or exit. However you can use the below code for a similar output on GCC compilers.
/********************************************************************
void func1(); 
void func2(); 
  
void __attribute__((constructor)) func1(); 
void __attribute__((destructor)) func2(); 
// since created as constructor therefore they are called automatically
// no need to call thrm in main function  
void func1() 
{ 
    printf("Inside func1()\n"); 
} 
void func2() 
{ 
    printf("Inside func2()\n"); 
} 
int main() 
{ 
    printf("Inside main()\n"); 
  
    return 0; 
} 
****************************************************************************/
output:
Inside func1()
Inside main()
Inside func2()




#pragma warn Directive: 
This directive is used to hide the warning message which are displayed during compilation.
We can hide the warnings as shown below:
#pragma warn -rvl: This directive hides those warning which are raised when a function which is supposed to return a value does not returns a value.
#pragma warn -par: This directive hides those warning which are raised when a function does not uses the parameters passed to it.
#pragma warn -rch: This directive hides those warning which are raised when a code is unreachable. For example: any code written after the return statement in a function is unreachable.



