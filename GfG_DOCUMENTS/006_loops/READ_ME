


							/*********** LOOPS **************/


While studying for loop we have seen that the number of iterations is known beforehand, i.e. the number of times the loop body is needed to be executed is known to us. while loops are used in situations where we do not know the exact number of iterations of loop beforehand. The loop execution is terminated on the basis of test condition.

In do while loops also the loop execution is terminated on the basis of test condition. The main difference between do while loop and while loop is in do while loop the condition is tested at the end of loop body, i.e do while loop is exit controlled whereas the other two loops are entry controlled loops.
Note: In do while loop the loop body will execute at least once irrespective of test condition.






























What happens if loop till Maximum of Signed and Unsigned in C/C++?
Let us have a look at following code snippet in C/C++.

********************************************************************************/
// An Unsigned char example 
#include<stdio.h> 
void fun1() 
{ 
    unsigned char i; 
    for (i=0; i<256; i++) 
        printf("%d ",i); 
} 
  
int main() 
{ 
    fun1(); 
    return 0; 
} 
********************************************************************************/
Output:

 Infinite Loop 
Explanation:

We know that the size of the character variable is 8 bits or 1 byte. Hence by base 2 representation of decimal numbers, the maximum number in 8 bits is 11111111.This is because the range of unsigned numbers in 8 bits ranges from 0 to 28-1

Now (11111111)2 = (255)10

If we drive the loop upto 255 starting from 0, it will execute the statement in the loop 256 times (both 0 and 255 inclusive). As the loop reaches to (255)10, After executing it, the variable “i” is incremented by 1 i.e. going by the 2s complement arithmetic,

(11111111)2 + (00000001)2 = (00000000)10

Note: the end carry is discarded in this case; hence the final incremented number is 0, which results in re-execution of the loop, hence the loop runs for the infinite times. Therefore the above condition can be avoided if we put limit to unsigned char i to be lesser than 255 rather than 256.

Now consider below program:

********************************************************************************/
// A signed char example 
#include<stdio.h> 
  
void fun2() 
{ 
    signed char i; 
    for (i=0; i<128; i++) 
        printf("%d ",i); 
} 
  
int main() 
{ 
    fun2(); 
    return 0; 
} 
********************************************************************************/
Output on GCC (Undefined Behavior in Standard):

 Infinite Loop  
Signed char range belongs from -27 to 27-1, hence it also goes for the infinite execution if the limit is <128.

Note that the 2s complement of (127)10 is (01111111)2 adding 1 to which will give us (10000000)2, which is –(128)10 when calculated from 2s complement form. 

So how to loop from 0 to max (255 or 128 or any other max limit)?
One way of doing this is below.


********************************************************************************/
// One way of looping till maximum of unsigned in C/C++ 
#include<stdio.h> 
void fun1() 
{ 
    unsigned char i = 0; 
    do
    { 
        printf("%d ", i); 
        i++; 
    } 
    while (i > 0); 
} 
int main() 
{ 
    fun1(); 
    return 0; 
} 
********************************************************************************/
Output: Numbers from 0 to 255

********************************************************************************/
// One way of looping till maximum of signed in C/C++ 
// (Same as above except first statement) 
#include<stdio.h> 
void fun2() 
{ 
    signed char i = 0; 
    do
    { 
        printf("%d ", i); 
        i++; 
    } 
    while (i > 0); 
} 
int main() 
{ 
    fun2(); 
    return 0; 
} 
********************************************************************************/
Output in GCC: Numbers from 0 to 127

Note: In C, signed overflow is undefined behavior, hence the above solution may not work on all machines for signed numbers. Also, the output shown above for signed may not be same on all machines. The behavior is well defined for unsigned numbers.
Following are mentioned in C99 .
About Unsigned:
A computation involving unsigned operands can never overflow, because a result that cannot be represented by the resulting unsigned integer type is reduced modulo the number that is one greater than the largest value that can be represented by the resulting type

About Signed:
An example of undefined behavior is the behavior on integer overflow.




































********************************************************************************/
// Illustration of range-for loop 
// using CPP code 
#include <iostream> 
#include <vector> 
#include <map> 
  
//Driver 
int main()  
{ 
    // Iterating over whole array 
    std::vector<int> v = {0, 1, 2, 3, 4, 5}; 
    for (auto i : v) 
        std::cout << i << ' '; 
      
    std::cout << '\n'; 
      
    // the initializer may be a braced-init-list 
    for (int n : {0, 1, 2, 3, 4, 5}) 
        std::cout << n << ' '; 
      
    std::cout << '\n'; 
   
    // Iterating over array 
    int a[] = {0, 1, 2, 3, 4, 5};      
    for (int n : a) 
        std::cout << n << ' '; 
      
    std::cout << '\n'; 
      
    // Just running a loop for every array 
    // element 
    for (int n : a)   
        std::cout << "In loop" << ' '; 
      
    std::cout << '\n'; 
      
    // Printing string characters 
    std::string str = "Geeks"; 
    for (char c : str)  
        std::cout << c << ' '; 
          
    std::cout << '\n'; 
  
    // Printing keys and values of a map 
    std::map <int, int> MAP({{1, 1}, {2, 2}, {3, 3}}); 
    for (auto i : MAP) 
        std::cout << '{' << i.first << ", " 
                  << i.second << "}\n"; 
} 
********************************************************************************/
0 1 2 3 4 5 
0 1 2 3 4 5 
0 1 2 3 4 5 
In loop In loop In loop In loop In loop In loop 
G e e k s 
{1, 1}
{2, 2}
{3, 3}























********************************************************************************/
// C++ code to demonstrate the  
// working of for_each loop 
  
#include<iostream> 
#include<vector> 
#include<algorithm> 
using namespace std; 
  
// helper function 1 
void printx2(int a) 
{ 
    cout << a * 2 << " "; 
} 
  
// helper function 2 
// object type function 
struct Class2 
{ 
    void operator() (int a) 
    { 
        cout << a * 3 << " "; 
    } 
} ob1; 
  
  
int main() 
{ 
      
    // initializing array 
    int arr[5] = { 1, 5, 2, 4, 3 }; 
      
    cout << "Using Arrays:" << endl; 
      
    // printing array using for_each 
    // using function 
    cout << "Multiple of 2 of elements are : "; 
    for_each(arr, arr + 5, printx2); 
      
    cout << endl; 
      
    // printing array using for_each 
    // using object function 
    cout << "Multiple of 3 of elements are : "; 
    for_each(arr, arr + 5, ob1); 
      
    cout << endl; 
      
    // initializing vector 
    vector<int> arr1 = { 4, 5, 8, 3, 1 }; 
      
    cout << "Using Vectors:" << endl; 
      
      
    // printing array using for_each 
    // using function 
    cout << "Multiple of 2 of elements are : "; 
    for_each(arr1.begin(), arr1.end(), printx2); 
      
    cout << endl; 
      
    // printing array using for_each 
    // using object function 
    cout << "Multiple of 3 of elements are : "; 
    for_each(arr1.begin(), arr1.end(), ob1); 
      
    cout << endl; 
      
} 
********************************************************************************/
Output:

Using Arrays:
Multiple of 2 of elements are : 2 10 4 8 6 
Multiple of 3 of elements are : 3 15 6 12 9 
Using Vectors:
Multiple of 2 of elements are : 8 10 16 6 2 
Multiple of 3 of elements are : 12 15 24 9 3 


In the cases of exceptions,
 if the function throws an exception, for_each loop will also throw an exception and break/terminate the loop.
********************************************************************************/
// C++ code to demonstrate the working  
// of for_each with Exception 
  
#include<iostream> 
#include<vector> 
#include<algorithm> 
using namespace std; 
  
// Helper function 1 
void printx2(int a) 
{ 
    cout << a * 2 << " "; 
    if ( a % 2 == 0) 
    { 
        throw a; 
    } 
      
} 
  
// Helper function 2 
// object type function 
struct Class2 
{ 
    void operator() (int a) 
    { 
        cout << a * 3 << " "; 
        if ( a % 2 == 0) 
        { 
            throw a; 
              
        } 
    } 
} ob1; 
  
  
int main() 
{ 
      
    // Initializing array 
    int arr[5] = { 1, 5, 2, 4, 3 }; 
      
    cout << "Using Array" << endl; 
      
    // Printing Exception using for_each 
    // using function 
    try
    { 
        for_each(arr, arr + 5, printx2); 
    } 
    catch(int i) 
    { 
        cout << "\nThe Exception element is : " << i ; 
    } 
    cout << endl; 
      
    // Printing Exception using for_each 
    // using object function 
    try
    { 
        for_each(arr, arr + 5, ob1); 
    } 
    catch(int i) 
    { 
        cout << "\nThe Exception element is : " << i ; 
    } 
      
    // Initializing vector 
    vector<int> arr1 = { 1, 3, 6, 5, 1 }; 
      
    cout << "\nUsing Vector" << endl; 
      
    // Printing Exception using for_each 
    // using function 
    try
    { 
        for_each(arr1.begin(), arr1.end(), printx2); 
    } 
    catch(int i) 
    { 
        cout << "\nThe Exception element is : " << i ; 
    } 
    cout << endl; 
      
    // printing Exception using for_each 
    // using object function 
    try
    { 
        for_each(arr1.begin(), arr1.end(), ob1); 
    } 
    catch(int i) 
    { 
        cout << "\nThe Exception element is : " << i ; 
    } 
} 
********************************************************************************/
Output:

Using Array
2 10 4 
The Exception element is : 2
3 15 6 
The Exception element is : 2
Using Vector
2 6 12 
The Exception element is : 6
3 9 18 
The Exception element is : 6





















if(condition) 
{
   // Statements to execute if
   // condition is true
}
Here, condition after evaluation will be either true or false. C if statement accepts boolean values – if the value is true then it will execute the block of statements below it otherwise not.












